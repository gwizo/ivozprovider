<?php

namespace Ivoz\Kam\Infrastructure\Persistence\Doctrine;

use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Ivoz\Core\Infrastructure\Persistence\Doctrine\Model\Helper\CriteriaHelper;
use Ivoz\Kam\Domain\Model\UsersLocation\UsersLocation;
use Ivoz\Kam\Domain\Model\UsersLocation\UsersLocationInterface;
use Ivoz\Kam\Domain\Model\UsersLocation\UsersLocationRepository;
use Symfony\Bridge\Doctrine\RegistryInterface;

/**
 * UsersLocationDoctrineRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UsersLocationDoctrineRepository extends ServiceEntityRepository implements UsersLocationRepository
{
    public function __construct(RegistryInterface $registry)
    {
        parent::__construct($registry, UsersLocation::class);
    }

    /**
     * @param string $domain
     * @param string $username
     * @return UsersLocationInterface | null
     */
    public function findOneByDomainUser(string $domain, string $username)
    {
        /** @var UsersLocationInterface $response */
        $response = $this->findOneBy([
            'username' => $username,
            'domain' => $domain
        ]);

        return $response;
    }

    /**
     * @return UsersLocationInterface[]
     * @throws \Doctrine\ORM\Query\QueryException
     */
    public function findByUsernameAndDomain(string $username, string $domain): array
    {
        $qb = $this->createQueryBuilder('self');
        $qb
            ->select('self')
            ->addCriteria(
                CriteriaHelper::fromArray([
                    [ 'domain', 'eq', $domain ],
                    [ 'username', 'eq', $username ]
                ])
            );

        return $qb->getQuery()->getResult();
    }

    /**
     * @param string[] $domains
     * @return UsersLocationInterface[]
     */
    public function findByDomains(array $domains): array
    {
        $qb = $this->createQueryBuilder('self');
        $qb
            ->select('self')
            ->addCriteria(
                CriteriaHelper::fromArray([
                    [ 'domain', 'in', $domains ],
                ])
            )
            ->addGroupBy('self.username')
            ->addGroupBy('self.domain')
            ->having('MAX(self.expires) = self.expires');

        return $qb->getQuery()->getResult();
    }
}
